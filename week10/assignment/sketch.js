let minDepth = 7;
let maxDepth = 9;

let xSize = 600;
let ySize = 600;

function setup() {
  createCanvas(xSize, ySize);
  drawArt();
}

function buildRandomFunction() {
  // This function should return ['x'], or ['y']
  // if depth is equal to maxDepth.
  //
  // It may return ['avg', f1, f2] or ['prod', f1, f2], where f1 and f2 are generated by a recursive call to buildRandomFunction, if depth is less than minDepth.
  //
  // It may return any of these if depth is at least as large as minDepth, but less than maxDepth.

  let randomCheck = random();
  if (randomCheck <= 0.2){
    return ["avg"];
  }else if(randomCheck >= 0.8){
    return ["prod"];
  }else if(randomCheck >0.2 && randomCheck <= 0.4){
    return ["dif"];
  }else if(randomCheck >0.4 && randomCheck <= 0.6){
    return ["x"];
  }else{
    return ["y"];
  }

}

function evaluateRandomFunction(fn, x, y) {
  // This function should return x if fn is ['x'].
  // It should call itself recursively if fn is, for example, ['avg', …, …]
  if (fn[0] == 'x') {
    return x;
  }else if(fn[0] == "y"){
    return y;
  }else if(fn[0] == "avg"){
    return 0.5*(x+y);
  }else if(fn[0] == "prod"){
    return x*y;
  }else if(fn[0] == "dif"){
    return 0.5*abs(x-y);
  }
  
  
}

function drawArt() {
  let redFunction = buildRandomFunction();
  let greenFunction = buildRandomFunction();
  let blueFunction = buildRandomFunction();

  let img = createImage(xSize, ySize);  
  img.loadPixels();
  for (let i = 0; i < xSize; i++) {
    for (let j = 0; j < ySize; j++) {
      let x = map(i, 0, xSize, -1, 1);
      let y = map(j, 0, ySize, -1, 1);
      let r = evaluateRandomFunction(redFunction, x, y);
      let g = evaluateRandomFunction(greenFunction, x, y);
      let b = evaluateRandomFunction(blueFunction, x, y);
      img.set(i, j, color(255 * r, 255 * g, 255 * b));
    }
  }
  img.updatePixels();
  image(img, 0, 0, width, height);
}
